book's key ideas:
- no linear description
 financial network
__bitcoin book chap 4
[[ch04_keys_addresses_wallets]]
== Keys, Addresses, Wallets

=== Introduction

((("bitcoin","establishing ownership of")))Ownership of bitcoin is established through _digital keys_, _bitcoin addresses_, and _digital signatures_. The digital keys are not actually stored in the network, but are instead created and stored by users in a file, or simple database, called a _wallet_. The digital keys in a user's wallet are completely independent of the bitcoin protocol and can be generated and managed by the user's wallet software without reference to the blockchain or access to the Internet. Keys enable many of the interesting properties of bitcoin, including de-centralized trust and control, ownership attestation, and the cryptographic-proof security model. 


Every bitcoin transaction requires a valid signature to be included in the blockchain, which can only be generated with valid digital keys; therefore, anyone with a copy of those keys has control of the bitcoin in that account. Keys come in pairs consisting of a private (secret) key and a public key. Think of the public key as similar to a bank account number and the private key as similar to the secret PIN, or signature on a check that provides control over the account. These digital keys are very rarely seen by the users of bitcoin. For the most part, they are stored inside the wallet file and managed by the bitcoin wallet software. 

In the payment portion of a bitcoin transaction, the recipient's public key is represented by its digital fingerprint, called a((("addresses, bitcoin","defined"))) _bitcoin address_, which is used in the same way as the beneficiary name on a check (i.e., "Pay to the order of"). In most cases, a bitcoin address is generated from and corresponds to a public key. However, not all bitcoin addresses represent public keys; they can also represent other beneficiaries such as scripts, as we will see later in this chapter. This way, bitcoin addresses abstract the recipient of funds, making transaction destinations flexible, similar to paper checks: a single payment instrument that can be used to pay into people's accounts, pay into company accounts, pay for bills, or pay to cash. The bitcoin address is the only representation of the keys that users will routinely see, because this is the part they need to share with the world.

In this chapter we will introduce wallets, which contain cryptographic keys. We will look at how keys are generated, stored, and managed. We will review the various encoding formats used to represent private and public keys, addresses, and script addresses. Finally, we will look at special uses of keys: to sign messages, to prove ownership, and to create vanity addresses and paper wallets. 

=== Wallets

((("wallets", id="ix_ch04-asciidoc23", range="startofrange")))Wallets are containers for private keys, usually implemented as structured files or simple databases. 
Another method for making keys is((("deterministic key generation"))) _deterministic key generation_. Here you derive each new private key, using a one-way hash function from a previous private key, linking them in a sequence. As long as you can re-create that sequence, you only need the first key (known as a _seed_ or _master_ key) to generate them all. In this section we will examine the different methods of key generation and the wallet structures that are built around them. 

[TIP]
====
Bitcoin wallets contain keys, not coins. Each user has a wallet containing keys. Wallets are really keychains containing pairs of private/public keys (see <<private_public_keys>>). Users sign transactions with the keys, thereby proving they own the transaction outputs (their coins). The coins are stored on the blockchain in the form of transaction-ouputs (often noted as vout or txout).((("txout notation")))((("vout notation")))


===== Private child key derivation

((("child key derivation (CKD) function")))((("child private keys")))((("hierarchical deterministic wallets (HD wallets)","CKD function and")))((("private keys","CKD function and")))((("seeded wallets","CKD function and")))Hierarchical deterministic wallets use a _child key derivation_ (CKD) function to derive children keys from parent keys. 

The child key derivation functions are based on a one-way hash function that combines: 

* A parent private or public key (ECDSA uncompressed key)
* A seed called a chain code (256 bits)
* An index number (32 bits)

The chain code is used to introduce seemingly random data to the process, so that the index is not sufficient to derive other child keys. Thus, having a child key does not make it possible to find its siblings, unless you also have the chain code. The initial chain code seed (at the root of the tree) is made from random data, while subsequent chain codes are derived from each parent chain code. 

These three items are combined and hashed to generate children keys, as follows.

The parent public key, chain code, and the index number are combined and hashed with the HMAC-SHA512 algorithm to produce a 512-bit hash. The resulting hash is split into two halves. The right-half 256 bits of the hash output become the chain code for the child. The left-half 256 bits of the hash and the index number are added to the parent private key to produce the child private key. In <<CKDpriv>>, we see this illustrated with the index set to 0 to produce the 0'th (first by index) child of the parent.

[[CKDpriv]]
.Extending a parent private key to create a child private key
image::images/msbt_0411.png["ChildPrivateDerivation"]

Changing the index allows us to extend the parent and create the other children in the sequence, e.g., Child 0, Child 1, Child 2, etc. Each parent key can have 2 billion children keys. 

Repeating the process one level down the tree, each child can in turn become a parent and create its own children, in an infinite number of generations. 

===== Using derived child keys

((("child key derivation (CKD) function","using")))((("child private keys","using")))((("security","child private keys and")))Child private keys are indistinguishable from nondeterministic (random) keys. Because the derivation function is a one-way function, the child key cannot be used to find the parent key. The child key also cannot be used to find any siblings. If you have the n~th~ child, you cannot find its siblings, such as the n–1 child or the n+1 child, or any other children that are part of the sequence. Only the parent key and chain code can derive all the children. Without the child chain code, the child key cannot be used to derive any grandchildren either. You need both the child private key and the child chain code to start a new branch and derive grandchildren. 

So what can the child private key be used for on its own? It can be used to make a public key and a bitcoin address. Then, it can be used to sign transactions to spend anything paid to that address.  

[TIP]
====
A child private key, the corresponding public key, and the bitcoin address are all indistinguishable from keys and addresses created randomly. The fact that they are part of a sequence is not visible, outside of the HD wallet function that created them. Once created, they operate exactly as "normal" keys. 
====

===== Extended keys

((("extended keys")))((("hierarchical deterministic wallets (HD wallets)","extended keys")))((("keys","extended")))As we saw earlier, the key derivation function can be used to create children at any level of the tree, based on the three inputs: a key, a chain code, and the index of the desired child. The two essential ingredients are the key and chain code, and combined these are called an _extended key_. The term "extended key" could also be thought of as "extensible key" because such a key can be used to derive children. 

Extended keys are stored and represented simply as the concatenation of the 256-bit key and 256-bit chain code into a 512-bit sequence. There are two types of extended keys. An extended private key is the combination of a private key and chain code and can be used to derive child private keys (and from them, child public keys). An extended public key is a public key and chain code, which can be used to create child public keys, as described in <<public_key_derivation>>.

Think of an extended key as the root of a branch in the tree structure of the HD wallet. With the root of the branch, you can derive the rest of the branch. The extended private key can create a complete branch, whereas the extended public key can only create a branch of public keys.

[TIP]
====
An extended key consists of a private or public key and chain code. An extended key can create children, generating its own branch in the tree structure. Sharing an extended key gives access to the entire branch. 
==== 

((("Base58Check encoding","extended keys and")))Extended keys are encoded using Base58Check, to easily export and import between different BIP0032-compatible wallets. The Base58Check coding for extended keys uses a special version number that results in the prefix "xprv" and "xpub" when encoded in Base58 characters, to make them easily recognizable. Because the extended key is 512 or 513 bits, it is also much longer than other Base58Check-encoded strings we have seen previously.


_______________
Versatility !! feedback - existent network - impact - creation and re-creation - intelligent growth ALONG real world trade....

_________________

ethereum at reason.com 
they branded themselves as "social operating system for planet earth"
crowdfundin 18 mio
"upcoming decentralization singularity"

__________________
content fragments (mine) :

platform stack -> reusable components -> sustainable

CRYPTO CURENCY ///  DIGITAL ASSETS !

MULTIPLE ACTORS !

HIGH LEVEL COMPONENTS and its "descomposicion"

core like adn que puede activarse segun necesidad y segun environment!
(herramientas y servicios virtuales que CREAN y/o consolidad una red, un entrono de relaciones en el MUNDO REAL )

world of transformations ocurring at global scale

printing -> journalismo ( cfr Alana Turing)

isolation -> network -> web -> cloud -> ? decentralized

disconnected --> connencted worldview

no stagnation - fluid 

INFO TRANSPORT ( METADATA) /// VALUE  TRANSPORT (CRYPTO TRANSACTION)

BLUE OCEAN STRATEGY : distributing others technology and services instead of competing

inclusivenes
	eg. fiat over crypto / discount wallet 


_____________
from lesson for a thriving world

transparent

decentralized

lifting the veil on transactions and empowering users with complete authority 

trust is the base of the existing financial institutions, and this trust has been too easily abused!

sakamotos "with e-currency based on cryptographic proof, without the need to trust a third party middleman, money can be secure and transactions effortless"

nearly all of our money systems today are based on debt !

Bitcoin is not like this, because it isn’t borrowed into existence. Whether you acquire bitcoin through “mining” or through trade, neither you nor anyone else is inherently obligated to repay it eventually to someone else. You have complete title and ownership, and you alone control its disposition.

Bitcoin encourages us to adopt a rather fascinatingly different view of money than we’re used to: one that unconditionally honors and empowers each individual, that doesn’t condition its existence upon debt, that incentivizes honesty over fraud, that can’t be manipulated in quantity to benefit some people at the expense of others, and that is provably fair and honest by way of a distributed public ledger

Remember those private cryptographic keys mentioned earlier? Those are not just the keys to your bitcoins — they are also key to your control.

When you take responsibility to protect the keys yourself, you are in sole control of the bitcoins they unlock. For some people, this kind of responsibility can be understandably uncomfortable or inconvenient, and you might like to delegate the responsibility to someone els

There is a whole class of possible contract-based systems that could be self-enforcing and self-regulating through the use of the same distributed block chain technology that Bitcoin is based on, and a number of ambitious projects have already begun to build these; several are listed in the Resources section below.

This is an exciting area of development to watch, as old and corrupt centralized systems are gradually obsoleted by new decentralized systems that honor the integrity of every participant and are provably fair and honest.

____________
Today's Copernican flip: How putting collaborative learning at the hub of human evolution improves our chances of survival

Sally J. Goerner
Sally J. Goerner
The Integral Science Institute, Chapel Hill, NC, USA
Behavioral Science 09/2007; 24(5):481 - 491. DOI: 10.1002/sres.849
ABSTRACT Civilization is reinventing itself, much as it did 500 years ago in the shift from medieval to modern patterns of society. This time, the modern, mechanistic, imperialistic approach to life is failing and a new, ‘collaborative learning species’ vision of humanity and ‘ecosystem’ view of Global Integral Civilization is rising to take its place. Systems science stands at the heart of a new, integral stage of science that supports this new stage of civilization, not only with empirical and methodological detail, but also with a solid foundation for the new cultural and economic understandings. The result is a Copernican flip in our scientific view of the world and a new Enlightenment movement beginning to gather force throughout the world. Yet, though the ideas, the technologies, the ennobling inspiration and even the popular desire for this new era already exist, so far they remain diffuse and disjoint—obscured, suffocated and intimidated beneath the powerful pressures of business as usual. Today's challenge is to use the new scientific framework to build the intellectual clarity, common-cause unity and social infrastructure needed to achieve the next stage in human development by channelling these positive forces into a self-sustaining, actively learning whole. Copyright © 2007 John Wiley & Sons, Ltd.

____________

bitcoin book:

As a developer, I see bitcoin as akin to the Internet of money, a network for propagating value and securing the ownership of digital assets via distributed computation.


However, neither Satoshi Nakamoto nor anyone else exerts control over the bitcoin system, which operates based on fully transparent mathematical principles. The invention itself is groundbreaking and has already spawned new science in the fields of distributed computing, economics, and econometrics.


In bitcoin terms, "spending" is signing a transaction that transfers value from a previous transaction over to a new owner identified by a bitcoin address.The "puzzle" used in bitcoin is based on a cryptographic hash and exhibits similar characteristics: it is asymmetrically hard to solve but easy to verify, and its difficulty can be adjusted.

chap 05
transactions

Bitcoin transactions can therefore be transmitted to the bitcoin
network over insecure networks such as WiFi, Bluetooth, NFC, Chirp,
barcodes, or by copying and pasting into a web form. In extreme cases,
a bitcoin transaction could be transmitted over packet radio,
satellite relay, or shortwave using burst transmission, spread
spectrum, or frequency hopping to evade detection and jamming. A
bitcoin transaction could even be encoded as smileys (emoticons) and
posted in a public forum or sent as a text message or Skype chat
message. Bitcoin has turned money into a data structure, making it
virtually impossible to stop anyone from creating and executing a
bitcoin transaction.


