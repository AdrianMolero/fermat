:numbered:

== FERMAT P2P Network and Communication Superlayer
This superlayer provides connectivity between *devices* by stablishing a _communication channel_. between a plug-in running on a *local device* which requires to consume certain service from its _counterpart_ (i.e. the plug-in with the same task) running on a *remote device*. +
This superlayer takes the entire responsibility of maintaining the communication channel "alive" as long as it is required, providing this *service* as a whole, i.e. offering this channel to the external layers and plug-ins in a *transparent* way for them, regardless of the *communication technology* that the layer uses to build this channel *_dynamically*_. + The upper layers should not be aware of the technology in use (wi-fi, NFC, p2p, bluetooth, etc.) and problems related to a connection should be solved by the communication layer without disturbing the clients.+
This ensures a safe way to offer *network services* by means of plug-ins built-on top of this layer, and as FERMAT being an _ open system_ , anybody can develop plug-ins to provide new network services, this ensures a rich *set of abstractions for wallet applications running on top of the platform*. +

NOTE: The *identification system* in FERMAT uses a pair of *privat-public keys* generated by asymmetric cryptography methods, to identify any component of the system, a *plug-in*, an *intraActor*, a *deviceUser*, a *network service*, a *communication channel*, etc... + 
Some *identities* are created only ONCE FOR ALL (when installing FERMAT), other ONCE for the entire session, and others are _dynamically_ asigned as a process starts to run and survive the entire process life cycle, and the most ephimere are renewed whenever a process changes *status*.
 

[[Fermat-P2P-CommunicationLayer]]
=== _Communication Layer_
This is the only layer in this superlayer, providing the communication services to the whole system, i.e. plug-ins that need *communication services* ask them to the *layer interface* and not to the plug-ins inside. +
Plug-ins in this layer essentially consist on the modules needed for the implementation of the communication protocols and interfaces for the different *communication technologies*.

Cloud Server :: 
For certain basic communications demand, a cloud server is a reasonable good option. At initialization of FERMAT, the cloud server manager receives the initial "log in" signal of each service that is starting, by means of the *cloud client* module. It is esential for offering network services that the *device user* as well as the *intraActor* modules are running and *logged in* the cloud server, which will therefore inform their status as "*online*". Then, when a _local_ *network service* needs to contact its _counterpart_ it "logs in"the cloud server and requires a *communication channel* with the specific *intraActor* in a specific *device*. 

Cloud Client :: _description ..._
P2P :: _description ..._
Geofenced :: _description ..._
Near Field Communication :: _description ..._
WiFi :: _description ..._
Mesh :: _description ..._+

