:numbered:

== Setting FERMAT to work. 
=== Getting the application for your device
Connect to FERMAT offical site ( http://www.fermat.org), choose the Operating System of the device where you want to install FERMAT, and download FERMAT APK (Android) or FERMAT installation file (windows)...

[system initialization]
=== Initialization

The application written for the chosen Operating System of your device (eg. Android in FERMAT'S first release) is a bundle of software packages that alltogether build FERMAT MULTI-PLATFORM SYSTEM. Few components are OS dependant but most of them (written in JAVA) is not (i.e. OS INDEPENDENT). +
At its core we find FERMAT CORE PLATFORM which is responsible for deploying the multiplatform infrastructure and initializing it. 

NOTE: Android is a *special case* because of some programming restrictions that only allow initialization from components written in android's language. Therefore the initialization sequence in this case, begins in the module *android core* which is the first one to become active and after that, it sets FERMAT CORE to run.

FERMAT CORE initializes every single platform of the system and instantiate every single plug-in giving the "start" signal by means of an usual "service"interface (each plugin knows what "start"means in each case). Then, in a second initialization round, the core platform collects information from the corresponding *application public interfaces (API)*, creates a "communication channel" between each component of the system and delivers to each one the *reference* on its dependance to consume services from one another.  + 
 
NOTE: FERMAT Plug-ins are not allowed to consume services directly among them, but referencing themselves to the corresponding platform via the platform's *api module* 

.FERMAT Api modules
* There is an *api module* for each FERMAT platform, where *public interfaces* of each plug-in are published in order to let them comsume services from others living in the same platform.

When all the basic infrastructure is layed out and some initial plug-ins are running, then the process thread turns to the *OS application* which starts the graphic interfaces and ressources needed to interact with the user, and the application opens its "starting screen". +
From that moment on, the activation of other dormant modules of FERMAT will follow according user's demand (depending on users activity).

TIP: Following in this chapter the description of each platform and each layer within each platform. We recommend to visit FERMAT offcial site (http://fermat.org) to have a picture in mind when reading, to help understand the system structure. _Layers_ description follow the sequence from bottom to top (like "stacking" them), and _platforms_ from left to right. 

=== System-wide definitions
One of main concept's inside FERMAT's design is the distinction of different _levels of identities_ depending on the realm where this _identities_ are valid. These creates a hierarchical structure of _identities_ and the _credentials_ associated with it.
The *real person* who wants to use FERMAT, has to install the software in at least one *device* and then let it run.
At this stage, the real person gets an initial identity a *device user*, which is automatically given by FERMAT and is transparent to him (needs not to worry about it and/or decide anything about it). This is valid for all the functions that happend INSIDE the device, and it contains certain information about himself/herself that is known to the device operating system, and which is stored in the device's memory/hard drive. + 
Then, to start using FERMAT, he/she is prompted by the software to choose a *master identity* within FERMAT. That means to choose an _username_ (or _ alias_) and a _password_ to be recognized as a *FERMAT system user*, and has certain _profile_ associated with it. 
Then, the *real person* turned into a *user* of FERMAT, chooses to run any of FERMAT's products, and this takes him to play certain role within a specific FERMAT Platform available, what turns him/she into an *actor* of the platform. As such, he/she must define an _actor identity_  within THIS platform, which is INDEPENDENT to any other created in other platforms, although it is related to the FERMAT system-wide *master identity*. + 
This *actor* has the possibility to define a set of multiple _wallet identities_ to operate within each wallet, defining a _profile_ for each one,  choosing the profile concepts to include (name, picture, occupation, etc) and the content of them, having total control of which information he shares with the world. + 
For the external world, each _wallet identity_ appears to be a "different person" and there are NO RELATIONS between them. However, for the *Fermat User* owning his *master identity*, all his *actor identities* and *wallet identities* are interconnected.

.Example of hierarchichal identities 
* *master identity* eg. John Doe, Colorado Springs, CO, USA.
** *actor identity 1* eg. "John cryptobroker"
*** *wallet identity1* eg. "The Commander Venezuela Cryptobroker"
*** *wallet identity1* eg. "Colorado Exchange Cryptobroker"
** *actor identity 2* eg. "Alice Brenda Smith cryptocurrency owner"
*** *wallet identity1* eg. "Alice bitcoin wallet user"
*** *wallet identity2* eg. "A.B.S. Bitcoin Loss Protected user"
** *actor identity3* eg. "Aunt Betty Muffins asset issuer"


=== FERMAT Core Platform
This is the *core platform* of FERMAT Multiplatform System. It contains the deepest levels of layers in the layers stack. Its modules encasulapte the basics definitions and functionalities that let FERMAT operate as an _integrated system_. +
The platform first defines a _plugin identity_ for each plugin (this is done only ONCE for the whole system), which let the plugin being *recognized* as member of FERMAT and then access to certain data specifically owned by it (like accesing to the file system or data base systems, etc). Then it put them to run ( see [system initialization] ) and builds the pattern of relationships among the isolated plug-ins, therefore deploying all the system wide infrastructure. +
FERMAT Core Platform is written in JAVA as the most of FERMAT, and that there is a JAVA implementation for each known operating system, that makes FERMAT *code base portable*. + 
After initialization, this platform monitors the way the system is behaving as a whole.

.FERMAT Core modules
fermat core :: 
Initializes all system-wide plug-ins and start a specific *core module* for each platform/superlayer running on FERMAT, which in turn initializes the platform/superlayer's specific set of plugins.
android core :: 
Initializes android's components that connect FERMAT to the android user's environment, by giving access to the modules of _android layer_ in *Fermat Operating System Superlayer*.
platform specific core ::
There's a *core module* for each one of the platform existent in FERMAT, which creates the _plugin indentity_ and initializes all platform/superlayer's specific plug-ins: +
. _Operating Systems core_
. _BlockChain core_
. _P2P Network and Communication core_
. _Plug-ins Platform core_
. _Wallet Production & Distribution core_
. _Crypto Currency core_
. _Crypto Commodity Money core_
. _Bank Notes core_
. _Shoping core_
. _Digital Assets core_
. _Marketing core_
. _Crypto Brokers core_
. _Crypto Distribution Network core_
. _Distributed Private Network_












