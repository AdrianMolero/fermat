:numbered:

== Setting FERMAT to work. 
=== Getting the application for your device
Connect to FERMAT offical site ( http://www.fermat.org), choose the Operating System of the device where you want to install FERMAT, and download FERMAT APK (Android) or FERMAT installation file (windows)...

=== Initialization

The application written for the chosen Operating System of your device (eg. Android in FERMAT'S first release) is a bundle of software packages that alltogether build FERMAT MULTI-PLATFORM SYSTEM. Few components are OS dependant but most of them (written in JAVA) is not (i.e. OS INDEPENDENT). +
At its core we find FERMAT CORE PLATFORM which is responsible for deploying the multiplatform infrastructure and initializing it. 

NOTE: Android is a *special case* because of some programming restrictions that only allow initialization from components written in android's language. Therefore the initialization sequence in this case, begins in the module *android core* which is the first one to become active and after that, it sets FERMAT CORE to run.

FERMAT CORE initializes every single platform of the system and every single plug-in by collecting information about the corresponding *application public interfaces (API)* and delivering to each one a *reference* on its dependance to consume services building a "communication channel" to instantiate objects and after that giving the "start" signal to beggin running. + 

NOTE: FERMAT Plug-ins are not allowed to consume services directly among them, but referencing themselves to the corresponding platform via the platform's *api module* 

.FERMAT Api modules
* There is an *api module* for each FERMAT platform, where *public interfaces* of each plug-in are published in order to let them comsume services from others living in the same platform.

When all the basic infrastructure is layed out and some initial plug-ins are running, then the process thread turns to the *OS application* which starts the graphic interfaces and ressources needed to interact with the user, and the application opens its "starting screen". +
From that moment on, the activation of other dormant modules of FERMAT will follow according user's demand (depending on users activity).

TIP: Following in this chapter the description of each platform and each layer within each platform. We recommend to visit FERMAT offcial site (http://fermat.org) to have a picture in mind when reading, to help understand the system structure. _Layers_ description follow the sequence from bottom to top (like "stacking" them), and _platforms_ from left to right. 

=== System-wide definitions
One of main concept's inside FERMAT's design is that of _actors_ and _identities_


=== FERMAT Core Platform
This is the *core platform* of FERMAT Multiplatform System. It contains the deepest levels of layers in the layers stack. Its modules encasulapte the basics definitions and functionalities that let FERMAT operate as an _integrated system_, by determining the interactions among the isolated plug-ins and putting then to run (starting). +
FERMAT Core Platform is written in JAVA as the most of FERMAT, therefore its *code base portability*. + 
After initialization, this platform monitors the way the system is behaving as a whole.

.FERMAT Core modules
* *fermat core* +
Initializes all system-wide plug-ins and start a platform specific core module for each platform running on FERMAT.
* *android core* + 
Initializes android's components that connect FERMAT to the android user's environment.
* *platform specific core* +
There's a *core module* for each one of the platform existent in FERMAT, which initializes all platform's specific plug-ins: _wallet production & distribution core_ / _crypto currency core_ / _digital assets core_ / etc... .


:numbered: 










