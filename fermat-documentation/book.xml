<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Fermat Documentation</title>
<date>2015-09-14</date>



</info>
<chapter xml:id="DocumentationOrganization">
<title>Documentation Organization</title>
<simpara>The system documentation is written is asciidoc format in order to be portable to many formats.<?asciidoc-br?>
We will decompose the system in the following way:</simpara>
<itemizedlist>
<listitem>
<simpara>First we will describe the system functionality as a whole app, where we will describe the actors and sub-apps involved in the system.</simpara>
</listitem>
<listitem>
<simpara>The next part is divided in the description of each layer. Inside every layer section we will find a general explanation of the layer, and follow by a list of all the plug-ins living in the layer.</simpara>
</listitem>
<listitem>
<simpara>Every plug-in will have its own subdivision, where we will find one reference for every developer who is in charge of an implementation of the plug-in.</simpara>
</listitem>
<listitem>
<simpara>Then each developer will have a final subdivision of its documentation to refer separately to the different version of the plug-in implemented.</simpara>
</listitem>
</itemizedlist>

<simpara>In this way we will get a central documentation where we will find a whole range of information about the system, from usage examples of the application to technical description of the plug-ins. We don&#8217;t want show code in this document, all the implementation details will be described inside the source files. Although, we will see in some cases technical discussions about the implementation challenges described in a slightly more abstract way than the source code.</simpara>
<simpara>So, the general structure of this document can be seen in the following way</simpara>
<itemizedlist>
<listitem>
<simpara>Platform Description</simpara>
<itemizedlist>
<listitem>
<simpara>Layer Description</simpara>
<itemizedlist>
<listitem>
<simpara>Plug-in Developer Index</simpara>
<itemizedlist>
<listitem>
<simpara>Developer Version Index</simpara>
<itemizedlist>
<listitem>
<simpara>Version Description</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</chapter>
<part xml:id="PlatformDescription">
<title>Platform Description</title>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>In the following sections we will explore:</simpara>
<itemizedlist>
<listitem>
<simpara>The functional description of this system (what is Fermat? how can we use it?).</simpara>
</listitem>
<listitem>
<simpara>The <link linkend="PlatformDescription-Wallets">wallets</link> and <link linkend="PlatformDescription-SubApps">applications</link> that run over this platform.</simpara>
</listitem>
<listitem>
<simpara>The <link linkend="PlatformDescription-SourceCode">code distribution and essentials concepts</link> needed to.</simpara>
</listitem>
</itemizedlist>

</chapter>
<chapter xml:id="PlatformDescription-Wallets">
<title>Wallets</title>
<section xml:id="_bitcoin_wallet">
<title>Bitcoin Wallet</title>
<simpara>This wallet is represented by the Nich Wallet Bitcoin Reference Wallet.<?asciidoc-br?>
We will explore the functionality of this wallet and all the modules involved in different work cycles.<?asciidoc-br?></simpara>
</section>
<section xml:id="_argentina_bitcoin_wallet">
<title>Argentina Bitcoin Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_bitcoin_loss_protected_wallet">
<title>Bitcoin Loss Protected Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_argentina_loss_protected_wallet">
<title>Argentina Loss Protected Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_argentina_discount_wallet">
<title>Argentina Discount Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_rounded_wallet">
<title>Rounded Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_argentina_multi_account_wallet">
<title>Argentina Multi Account Wallet</title>
<simpara>to be completed</simpara>
</section>
<section xml:id="_argentina_bank_notes_wallet">
<title>Argentina Bank Notes Wallet</title>
<simpara>to be completed</simpara>
</section>
</chapter>
<chapter xml:id="PlatformDescription-SubApps">
<title>Subapplications</title>
<simpara>It is important to mention that every subapp described here is divided in a user interface and a logic module. The application UI runs over the platform and the logic that control the app lives inside the platform. This means that for each subapplication we will find a plug-in in the <link linkend="Fermat-DMP-ModuleLayer">module layer</link> that implements the behavior of the app.</simpara>
<section xml:id="Platform-SubApps-Shell">
<title>Shell</title>
<simpara>Brings the available functionality when no user has logged in.<?asciidoc-br?>
Some trivial functionalities are the login functionality, account creation, forgotten password, etc.<?asciidoc-br?></simpara>
<simpara>The login policies are pending to be discussed. One initial idea is that the login should not be done every time the user opens the Fermat app or turn on the device. However we should consider that this could be a kind of security mechanism, we could also have expiration session times.<?asciidoc-br?></simpara>
<simpara>Another idea is to set a limit in the amount of money the user can manage without logging in.</simpara>
</section>
<section xml:id="Platform-SubApps-WalletManager">
<title>Wallet Manager</title>
<simpara>This app let the user administrate the different <link linkend="PlatformDescription-Wallets">wallets</link> a he has installed in his device.<?asciidoc-br?>
There are some operations between wallets that may be appropriate for this module to handle, for example we could manage transactions between wallets of a same user using this app.<?asciidoc-br?></simpara>
<simpara>The first set of wallets will be installed by default, in the future the manager will get new wallets from the <link linkend="Platform-SubApps-WalletStore">wallet store</link>.</simpara>
</section>
<section xml:id="Platform-SubApps-WalletFactory">
<title>Wallet Factory</title>
<simpara>This subapp is focused in developers, it lets a user edit the navigation structure of a wallet and create what we call a wallet factory project.<?asciidoc-br?>
This projects will be managed by a subapp called <link linkend="Platform-SubApps-WalletPublisher">Wallet Publisher</link>.</simpara>
<simpara>When a user edit a wallet he can set (add) the resources (like images) the wallet use.<?asciidoc-br?>
Those resources are not saved in the wallet runtime but are referenced using the wallet resources plug-in.<?asciidoc-br?></simpara>
<simpara>When the wallet manager install a new wallet it ask the corresponding resources to the wallet resources plug-in.<?asciidoc-br?></simpara>
<simpara>At this moment the resources are stored in a github repository associated to each wallet. In the future we plan to avoid the necessity of a central point of reference to download resources and to have them distributed over the platform&#8217;s users.</simpara>
</section>
<section xml:id="Platform-SubApps-WalletPublisher">
<title>Wallet Publisher</title>
<simpara>This subapp can read the output product of the <link linkend="Platform-SubApps-WalletFactory">wallet factory</link> which are files called wallet factory projects.</simpara>
</section>
<section xml:id="_this_need_to_be_revised_explained">
<title>THIS NEED TO BE REVISED/EXPLAINED</title>
<simpara>This module publish the new wallet in the wallet store.<?asciidoc-br?>
When another user installs the new wallet, this subapp will configure the wallet runtime to run the new wallet (??)</simpara>
<simpara>This module also let a wallet administrator (developer, marketing agency, brand, etc) interact with the wallet users and know some statistics to be defined like number of users.</simpara>
</section>
<section xml:id="Platform-SubApps-WalletStore">
<title>Wallet Store</title>
<simpara>This subapp shows the user the different wallets he can download and install in his device.</simpara>
</section>
<section xml:id="Platform-SubApps-WalletEditor">
<title>Wallet Editor</title>
<simpara>This subapp let an actor take any wallet in the <link linkend="Platform-SubApps-WalletStore">wallet store</link> and edit it. The subapp is focused to marketing agencies.<?asciidoc-br?>
Here edition means that the subapp will take the navigation structure of the selected wallet from the wallet runtime and copy it to what we will call a wallet editor project.<?asciidoc-br?>
Basically, the edition let the actor change the navigation structure and user interface, but it doesn&#8217;t let you change the wallet business logic.</simpara>
<simpara>This editor let the actors change the resources settled by the <link linkend="Platform-SubApps-WalletFactory">wallet factory</link> and basically make a fork of the wallet.<?asciidoc-br?></simpara>
<simpara>Following the life cycle, this project will be taken by a particular brand before the publishing of the wallet.</simpara>
</section>
<section xml:id="_wallet_licensing">
<title>Wallet Licensing</title>

</section>
<section xml:id="Platform-SubApps-ShopManager">
<title>Shop Manager</title>
<simpara>Similar to the <link linkend="Platform-SubApps-WalletManager">wallet manager</link> this subapp let shop owners administrate their different shops in this platform.<?asciidoc-br?>
The shops are individually managed using the <link linkend="Platform-SubApps-shop">shop subapp</link>.</simpara>
</section>
<section xml:id="Platform-SubApps-Shop">
<title>Shop</title>
<simpara>This subapp let a shop owner manage his shop. This include adding products, the store location, editing prices, emitting discounts, etc. Creating a presentation page in the platform.</simpara>
</section>
<section xml:id="Platform-SubApps-Brand">
<title>Brand</title>
<simpara>This subapp let a brand navigate through the wallets it has published and create marketing products like coupons.<?asciidoc-br?></simpara>
<simpara>There will be a mechanism for the interaction between a brands and shops to associate in the use of marketing products.</simpara>
</section>
<section xml:id="Platform-SubApps-Retailer">
<title>Retailer</title>
<simpara>TO BE COMPLETED</simpara>
</section>
<section xml:id="Platform-SubApps-CryptoBroker">
<title>Crypto Broker</title>
<simpara>This is a subapp focused for the use of brokers (people who buy and sell crypto currencies).<?asciidoc-br?>
The brokers are central actors in this platform.</simpara>
</section>
<section xml:id="Platform-SubApps-TopUpPoint">
<title>Top Up Point</title>
<simpara>The idea is to let actors provide the service of selling crypto currency in exchange of fiat currency.</simpara>
</section>
<section xml:id="Platform-SubApps-CashOutPoint">
<title>Cash Out Point</title>
<simpara>Similar to <link linkend="Platform-SubApps-TopUpPoint">top up point</link>, this subapp let actors provide the service of buying crypto currency in exchange of fiat currency.</simpara>
</section>
<section xml:id="Platform-SubApps-Designer">
<title>Designer</title>
<simpara>This subapp is initially intended to let developers contact user interface designers.</simpara>
</section>
<section xml:id="Platform-SubApps-Developer">
<title>Developer</title>
<simpara>This subapp should let user contact the developers of their wallets.<?asciidoc-br?></simpara>
</section>
<section xml:id="Platform-SubApps-Marketer">
<title>Marketer</title>
<simpara>TO BE COMPLETED</simpara>
</section>
</chapter>
<chapter xml:id="PlatformDescription-SourceCode">
<title>Source Code Distribution</title>
<simpara>Fermat Platform is divided in three main subsystems.</simpara>
<variablelist>
<varlistentry>
<term>Fermat-PIP</term>
<listitem>
<simpara><emphasis role="strong">P</emphasis>lug-<emphasis role="strong">i</emphasis>ns <emphasis role="strong">P</emphasis>latform. Basic components that bring essential functionality to the platform. This components are in general independent of the functionality to be implemented above the system.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fermat-P2P</term>
<listitem>
<simpara>Brings the network infrastructure</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fermat-DMP</term>
<listitem>
<simpara><emphasis role="strong">D</emphasis>igital <emphasis role="strong">M</emphasis>oney <emphasis role="strong">P</emphasis>latform. This modules implement the tools for the <link linkend="PlatformDescription-SubApps">subapplications</link></simpara>
</listitem>
</varlistentry>
</variablelist>

<simpara>Each of this subsystem is divided in layers. Inside the layers we can find plug-ins, each plug-in has a specific responsability. As a convention we call the plug-ins inside Fermat-PIP Addons instead of Plug-ins.<?asciidoc-br?>
Plug-ins need to identify themself in order to ask for resources to addons. This is a security and organizational decision that helps the system organization as a whole.</simpara>
<simpara>We can also identify outside these subsystems two main structures. One is what we call fermat-api and the other is fermat-core.</simpara>
<section xml:id="_fermat_api">
<title>fermat-api</title>
<simpara>The modules inside each layer define the necessary interfaces to accomplish their duty inside the plug-ins. However, this interfaces bring many times too much information to the developer. This is why we define a group of reduces interfaces to export to other layers. This interfaces among other definitions can be found in this module called fermat-pip-api.+
Some other definitions are for example exceptions and enums.</simpara>
</section>
<section xml:id="_fermat_core">
<title>fermat-core</title>
<simpara>This set of classes are the representation of the platform. The purpose of this modules is to initialize the whole system and to monitor the way the application is behaving.<?asciidoc-br?></simpara>
</section>
<section xml:id="_initialization_process">
<title>Initialization process</title>
<simpara>The most intuitive way to initialize the platform is by creating an instance of each layer and then of each plug-in inside.+
So the sequence could be:</simpara>

<literallayout class="monospaced">Platform -&gt; Layer -&gt; Plug-in</literallayout>


<simpara>One problem with this approach is that if we develop a new version of a plug-in tha needs more resources than the previous one, then there may be some devices that won&#8217;t be able to run the new version and would opt for the previous one.<?asciidoc-br?>
We would like that the platform could decide which version instantiate without the user having to indicate explicitly.<?asciidoc-br?>
This is why we defined a class named DeveloperBitDubai. The responsibility of this layer is to decide which version of a plug-in the platform should instantiate. Others developers will have there own Developer class to accomplish the same function.</simpara>
<simpara>The new initialization sequence would be:</simpara>

<literallayout class="monospaced">Platform -&gt; Layer -&gt; Developer -&gt; Plug-in</literallayout>


<simpara>This works fine as long as we stay as the only developer for a plug-in. We could imagine that in the future a new developer would like to create it&#8217;s own version of an existing plug-in to offer to the platform.<?asciidoc-br?>
In this scenario we find again the problem we had for versions. Who decides which developer implementation we should select.
We created the PluginSubsystem class to solve this problem. The subsystem class instantiate the developer class and finally this developer class instantiate the version of the plug-in.</simpara>
<simpara>The final initialization sequence is therefore:</simpara>

<literallayout class="monospaced">Platform -&gt; Layer -&gt; Subsysyem -&gt; Developer -&gt; Plug-in</literallayout>


</section>
</chapter>
</part>
</book>