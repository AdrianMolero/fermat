[[digital-asset-transaction-asset-issuing-BitDubai-V1]]
= Version 1

Este plugin, de naturaleza transaccional, tiene por objetivo recopilar toda la información necesaria para la emisión de un Digital Asset.
Esta información, no solo contendrá el detalle de la transacción cripto (Genesis transaction) asociada al asset,
deberá incluir la información multimedia que sirva para la construcción de la UI del Asset en el dispositivo, asi como el contrato de uso del mismo.

El plugin Asset Issuing será el encargado de la creación de los Assets, incluyendo metadata y crypto monto, que posteriormente serán enviados a los posibles destinatarios de los Digital Assets. Este plugin
deberá solicitar la genesis transaction, la cual se define como la transacción origen de los crypto montos a ser transferidos junto al asset, así mismo, debe solicitar
la genesis address, la cual se define como la dirección que emitió el Asset. Una vez obtenida la información antes mencionada, este plugin debe crear las transacciones que
permitan la transferencia de los Assets a los destinatarios. Este plugin debe ser responsable de cada uno de los Assets generados hasta que todos hayan sido entregados a los
destinatarios. Este plugin debe tener la capacidad de monitorear que Asset ha sido entregado y registrarlo, para su posterior consumo. Si un asset no hasido registrado como entregado por este plugin, ese Asset no debería ser consumido por el beneficiario.
Estos Assets pueden ser enviados a cualquier tipo de wallet, es decir, debe ser transparente para este plugin los destinatarios de los assets, la metadata que se entrega a
 este plugin debe incluir la información que permita discriminar a que tipo de wallet/destinatario va dirigido el Asset, este proceso de filtrado podría tomarse de las wallets
 instaladas actualmente, este plugin debe recibir de una capa superior el criterio de selección de los destinatarios, de tal forma que este pueda crear la transación que permita
 enviar el asset al destinatario.
Los Assets que no se hayan enviado deben permanecer en el dispositivo emisor (Asset Distribution) hasta que el beneficiario haya autorizado la instalación/descarga del digital asset
a su dispositivo. Al momento de instalación del Asset en el dispositivo destino es que se debe realizar la trasferencia del crypto monto al dispositivo destino.
Los crypto montos del emisor asociados a cada assets deben estar reservados en el dispositivo emisor hasta que sean transferidos a los beneficiarios. Estos montos no deben
cambiar una vez reservados.

== Plug-in Description

El objeto DigitalAsset de la plataforma, contará con las siguientes propiedades:

 * Identity Asset Issuer: Identity del Actor AssetIssuer
 * String name: nombre del Asset definido por el issuer.
 * String description: descripción del asset definido por el issuer.
 * List<Resource>: lista de recursos posibles del asset, como por ejemplo imágenes, videos, etc.
 * String GenesisTransaction: hash de la transacciín bitcoin donde el asset está incluido.
 * Address GenesisAddress: dirección Genesis generada por la Asset Vault
 * long GenesisAmount: valor crypto del digital asset en Satoshis.

 Digital Asset Contract (DAC)

Como contrato básico para el Digital Asset para poder cerrar el ciclo en el desarrollo inicial de la plataforma,
especificaremos que:

 * Redimible.
 * ExpirationDate: fecha de expiración que puede ser nunca.
 * Transferible.

La emisión de un Digital Asset va a tener un enum con los siguientes estados:

* Draft: cuando el issuer está completando los datos básicos del asset y del contrato.
* PendingFinal: cuando el issuer solicita que se arme la transacción bitcoin y se cierre el asset.
* Final: cuando se generó el hash del DA y el Asset ya no se puede modificar.

Asset Issuing debera seguir los siguientes pasos para construir un Digital Asset, una vez completadas estas propiedades por parte del Issuer, la Asset Issuer subApp ocurre:

* Se reciben la información multimedia y las características de la transacción propias del Digital Asset de parte del module de la subApp AssetIssuer.
* Se solicita a la Crypto Vault la creación de una transaction bitcoin a través del Outoing Intra user. Este hash se define como la GenesisTransaction
en el Digital Asset.
* Se solicita a la Asset Vault una dirección bitcoin que será la GenesisAddress. Esta dirección solicitada queda registrada en el Address Book como solicitada por el Issuer Actor,
la plataforma DAP y la vault de donde sale la dirección.
* Se completa la crypto transacción especificando el GenesisAmount.
//¿cual plugin debo invocar para llevar a cabo esta transacción, Outoing Intra user?
* Se ejecuta un hash del Digital Asset y el mismo se coloca en el OP_RETURN de la crypto transacción.
//¿Esta es la función que se encuentra en el DigitalAssetMetadata?
* Se commitea la transacción y la misma es publicada a la red de bitcoin a través de la Crypto Network. Esto se realiza por medio de la CryptoVault.
* Se asocia la metadata a la genesis transaction.
//TODO: definir el componente que debe realizar esta acción.
* El Digital Asset es considerado creado, en este paso el estado (State) del Asset se fija en _final_. Una vez que el Digital Asset entra en estado _final_ se considera creado,
en este estado, sus propiedades no deben ser modificadas por ningún actor de la plataforma, ya que esto modificaría la relación entre la metadata propia del Digital Asset y
su respectiva GenesisTransaction.
* El Digital Asset se considera _available_ cuando la transacción bitcoin es detectada como entrante por el Incoming Crypto.
* Todos los Digital Assets generados deben ser transferidos al plugin AssetDistribution, este plugin se encargará de realizar la transferencia, de acuerdo a los
criterios establecidos por AssetIssuer.

Al iniciar el plugin este instancia al objeto DigitalAssetCryptoTransactionFactory, el cual será el encargado de tomar el Digital Asset creado por AssetIssuingTransactionPluginRoot con los datos provenientes de la UI a través del AssetIssuerModule.
DigitalAssetCryptoTransactionFactory (DACTF) usará una instancia del CryptoVaultManager para crear la genesis transaction, la cual quedará registrada en el CryptoAddressBook por medio de CryptoAddressBookManager, que se va a asociar al objeto Digital Asset y así crear un nuevo DigitalAssetMetadata, este último objeto debe generase al concluir
el proceso de creación del digital Asset, ya que este es quien ajustaría el estado a _final_, una vez que se encuentra en este estado ya no se debe modificar ninguna característica del Digital Asset.


== Plug-in Structure

== Events

== Implementation Details

